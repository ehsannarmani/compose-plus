{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Compose Plus","text":"<p>Compose Plus is an open-source multi-platform library designed to simplify Jetpack Compose development. It provides reusable components, utility functions, and extensions that streamline common tasks, making app development more efficient and easier.</p> <p> </p> <p> </p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#gradle-setup","title":"Gradle Setup","text":"<pre><code>dependencies {\n    implementation (\"ir.ehsannarmani.compose-plus:extensions:latest_version\")\n    implementation (\"ir.ehsannarmani.compose-plus:functions:latest_version\")\n    implementation (\"ir.ehsannarmani.compose-plus:components:latest_version\")\n}\n</code></pre>"},{"location":"functions/activity-contract/","title":"Activity Contract","text":"<p>Activity Contract functions are utility functions to launch activity contract functions with less code</p>"},{"location":"functions/activity-contract/#permission-request","title":"Permission Request","text":"<p>LaunchPermissionRequest function will launch a permission request in android in the first time of composable render.</p> <p>Single Permission Request</p> <pre><code>setContent {\n    LaunchPermissionRequest(\n        permission = Manifest.Permission.POST_NOTIFICATIONS,\n        onResult = { \n\n        }\n    )\n}\n</code></pre> <p>Multiple Permission Request</p> <pre><code>setContent {\n    LaunchPermissionRequest(\n        permissions = listOf(\n            Manifest.Permission.POST_NOTIFICATIONS,\n            Manifest.Permission.READ_EXTERNAL_STORAGE\n        ),\n        onResult = {\n\n        }\n    )\n}\n</code></pre>"},{"location":"functions/animation/","title":"Animation","text":"<p>Animation functions are utility functions to define remembered animatables and animations with less code</p>"},{"location":"functions/animation/#animatable","title":"Animatable","text":"<pre><code>val animatedColor by rememberAnimatable(Color.Red)\nval animatedFloat by rememberAnimatable(0f)\n\nanimatedColor.animateTo(Color.Blue)\nanimatedFloat.animateTo(10f)\n</code></pre>"},{"location":"functions/saveable-state/","title":"Saveable State","text":"<p>Saveable State functions are utility functions to define remembered saveable states with less code</p>"},{"location":"functions/saveable-state/#normal-state","title":"Normal State","text":"<pre><code>val ourState by rememberSaveableState(\"it's our state\")\nval ourState by rememberSaveableState(\"username: $name\",key = name)\n</code></pre>"},{"location":"functions/saveable-state/#list-state","title":"List State","text":"<pre><code>val ourState by rememberSaveableListState(\"value1\",\"value2\",\"value3\")\nval ourState by rememberSaveableListState(\"value1\",\"value2\",name,keys = listOf(name))\n\nval ourState by rememberSaveableListState(items = listOf(\"value1\",\"value2\",\"value3\"))\nval ourState by rememberSaveableListState(items = listOf(\"value1\",\"value2\",name), name /* vararg keys... */)\n</code></pre>"},{"location":"functions/saveable-state/#map-state","title":"Map State","text":"<pre><code>val ourState by rememberSaveableMapState(\n    1 to 2,\n    20 to 10,\n    ...\n)\nval ourState by rememberSaveableMapState(\n    \"ehsan\" to grade1,\n    \"ali\" to grade2,\n    keys = listOf(grade1,grade2)\n)\n</code></pre>"},{"location":"functions/saveable-state/#primitive-type-states","title":"Primitive Type States","text":"<pre><code>val isEnabled by rememberSaveableBoolState()\nval name by rememberSaveableStringState(\"ehsan\")\nval grade by rememberSaveableIntState(1)\nval progress by rememberSaveableFloatState(0.5f)\nval price by rememberSaveableDoubleState(2.5)\nval bytes by rememberSaveableLongState(1024)\n</code></pre>"},{"location":"functions/state/","title":"State","text":"<p>State functions are utility functions to define remembered states with less code</p>"},{"location":"functions/state/#normal-state","title":"Normal State","text":"<pre><code>val ourState by rememberState(\"it's our state\")\nval ourState by rememberState(\"username: $name\",key = name)\n</code></pre>"},{"location":"functions/state/#list-state","title":"List State","text":"<pre><code>val ourState by rememberListState(\"value1\",\"value2\",\"value3\")\nval ourState by rememberListState(\"value1\",\"value2\",name,keys = listOf(name))\n\nval ourState by rememberListState(items = listOf(\"value1\",\"value2\",\"value3\"))\nval ourState by rememberListState(items = listOf(\"value1\",\"value2\",name), name /* vararg keys... */)\n</code></pre>"},{"location":"functions/state/#map-state","title":"Map State","text":"<pre><code>val ourState by rememberMapState(\n    1 to 2,\n    20 to 10,\n    ...\n)\nval ourState by rememberMapState(\n    \"ehsan\" to grade1,\n    \"ali\" to grade2,\n    keys = listOf(grade1,grade2)\n)\n</code></pre>"},{"location":"functions/state/#primitive-type-states","title":"Primitive Type States","text":"<pre><code>val isEnabled by rememberBoolState()\nval name by rememberStringState(\"ehsan\")\nval grade by rememberIntState(1)\nval progress by rememberFloatState(0.5f)\nval price by rememberDoubleState(2.5)\nval bytes by rememberLongState(1024)\n</code></pre>"}]}